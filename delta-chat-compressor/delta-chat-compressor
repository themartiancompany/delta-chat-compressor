#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "rsync"
  _check_cmd \
    "sudo" \
    "tsu"
  _check_cmd \
    "ytencode" \
    "media-tools"
}

_size_get() {
  local \
    _file="${1}"
  du \
    -hs \
    "${_file}" | \
  awk \
    '{print $1}'
}

_delta_chat_compressor() {
  local \
    _media=() \
    _vid \
    _app_dir \
    _app \
    _tmp \
    _current_user \
    _app_user \
    _name \
    _size \
    _ffmpeg
  _current_user="$( \
    id \
      -un)"
  _tmp="$( \
    mktemp \
      -d)"
  _app="com.b44t.messenger"
  _app_dir="/data/data/${_app}"
  _app_user="$( \
    sudo \
      stat \
        -c \
          "%U" \
        "${_app_dir}")"
  _media=( $( \
    sudo \
      find \
        "${_app_dir}" \
        -iname "*.mp4" | \
        grep ".mp4")
  )
  _msg_info \
    "app user: '${_app_user}'"
  for _vid in "${_media[@]}"; do
    _name="$( \
      basename \
        "${_vid}")"
    sudo \
      cp \
        "${_vid}" \
        "${_tmp}/${_name}"
    sudo \
      chown \
        "${_current_user}" \
        "${_tmp}/${_name}"
    _size="$( \
      _size_get \
       "${_tmp}/${_name}")"
    _msg_info \
      "file '${_name}'"
    _msg_info \
      "size '${_size}'"
    _ffmpeg="$( \
      ytencode \
        "${_tmp}/${_name}" \
        "${_tmp}/vid.mp4" 1&>/dev/null)"
    if [[ "${quiet}" == 'n' ]]; then
      echo \
        "${_ffmpeg}"
    fi
    _size="$( \
      _size_get \
        "${_tmp}/vid.mp4")"
    _msg_info \
      "new size '${_size}'"
    sudo \
      cp \
        "${_tmp}/vid.mp4" \
        "${_vid}"
    sudo \
      chown \
      "${_app_user}" \
      "${_vid}"
    rm \
      "${_tmp}/vid.mp4" \
      "${_tmp}/${_name}"
    break
  done
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Compress Delta Chat video files.

usage:
  $(_get "app" "name")
    [options]
  options:
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

# Shows configuration options.
_show_config() {
  local \
    _get_date
  TZ=UTC \
    printf \
      -v _get_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "           Operation date:   $(_get "_get" "date")"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'cvh?' \
    arg; do
  case \
    "${arg}" in
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
_set_overrides
_show_config
app_opts=(
#   "$( \
#     _get \
#       "target" \
#       "directory")"
)
_delta_chat_compressor \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
